// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211215150449_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Member");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 15, 10, 4, 49, 581, DateTimeKind.Local).AddTicks(5250),
                            PasswordHash = new byte[] { 29, 92, 80, 204, 74, 124, 140, 160, 210, 242, 138, 188, 225, 26, 102, 0, 244, 66, 190, 9, 248, 139, 94, 212, 121, 94, 224, 64, 36, 84, 42, 45, 167, 2, 111, 230, 156, 195, 227, 25, 146, 32, 181, 16, 88, 38, 173, 216, 144, 109, 41, 153, 86, 100, 228, 59, 163, 166, 14, 184, 230, 249, 127, 184 },
                            PasswordSalt = new byte[] { 121, 139, 115, 19, 57, 98, 46, 158, 246, 140, 159, 11, 210, 24, 191, 169, 119, 7, 130, 70, 186, 83, 134, 102, 94, 27, 114, 241, 148, 12, 52, 197, 131, 51, 197, 95, 211, 15, 122, 254, 80, 218, 231, 198, 217, 66, 203, 152, 228, 85, 34, 191, 35, 230, 7, 138, 231, 140, 206, 237, 25, 108, 221, 59, 16, 91, 203, 8, 247, 1, 210, 86, 21, 109, 177, 69, 12, 113, 2, 203, 129, 45, 219, 82, 239, 75, 46, 216, 21, 57, 91, 27, 149, 197, 144, 200, 41, 90, 197, 188, 102, 44, 248, 193, 189, 209, 90, 187, 56, 101, 123, 22, 125, 52, 24, 94, 75, 193, 104, 142, 137, 238, 110, 208, 240, 90, 51, 198 },
                            Role = "Admin",
                            UpdatedOn = new DateTime(2021, 12, 15, 10, 4, 49, 581, DateTimeKind.Local).AddTicks(5252),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 15, 10, 4, 49, 581, DateTimeKind.Local).AddTicks(5325),
                            PasswordHash = new byte[] { 182, 126, 102, 190, 99, 130, 143, 244, 204, 79, 55, 125, 72, 216, 65, 219, 152, 102, 2, 220, 68, 134, 242, 3, 241, 204, 199, 123, 182, 76, 209, 83, 91, 207, 251, 216, 210, 55, 86, 241, 15, 198, 161, 136, 21, 255, 72, 77, 104, 160, 126, 84, 48, 71, 70, 239, 134, 156, 201, 225, 188, 199, 232, 85 },
                            PasswordSalt = new byte[] { 236, 234, 241, 89, 142, 30, 179, 104, 99, 164, 109, 207, 14, 21, 40, 139, 2, 126, 236, 247, 93, 47, 137, 25, 169, 223, 215, 148, 89, 209, 68, 26, 242, 90, 52, 139, 244, 55, 202, 185, 11, 22, 98, 54, 53, 38, 255, 249, 164, 55, 123, 150, 132, 67, 64, 66, 170, 19, 207, 168, 106, 142, 228, 194, 221, 167, 147, 79, 174, 6, 87, 98, 170, 169, 243, 133, 206, 76, 39, 227, 233, 212, 87, 157, 58, 231, 85, 26, 128, 109, 47, 11, 238, 109, 119, 144, 102, 140, 220, 244, 230, 61, 240, 224, 154, 236, 0, 62, 229, 173, 181, 181, 56, 45, 51, 229, 117, 191, 59, 209, 155, 46, 180, 4, 231, 157, 178, 38 },
                            Role = "Member",
                            UpdatedOn = new DateTime(2021, 12, 15, 10, 4, 49, 581, DateTimeKind.Local).AddTicks(5327),
                            UserName = "member"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Name = "Electronics"
                        },
                        new
                        {
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemListingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemListingId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            ItemListingId = 1,
                            OwnerId = 2,
                            PublicId = "tcl_tv_ufvgvz",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551491/folding_table_rgrmom.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsMain = true,
                            ItemListingId = 2,
                            OwnerId = 2,
                            PublicId = "folding_table_rgrmom",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551492/tcl_tv_ufvgvz.jpg"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Fair");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("Number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemListings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Furniture",
                            Condition = "Excellent",
                            CreatedOn = new DateTime(2021, 12, 15, 10, 4, 49, 581, DateTimeKind.Local).AddTicks(6683),
                            Description = "Round folding dining table from Bob's Furniture Store.\nGreat for smaller dining areas/apartments. Smoke-free home.\n\nAsking price - $50.",
                            OwnerId = 2,
                            Price = 50.0,
                            Title = "Round Folding Dining Table"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Electronics",
                            Condition = "New",
                            CreatedOn = new DateTime(2021, 12, 15, 10, 4, 49, 581, DateTimeKind.Local).AddTicks(6697),
                            Description = "Absolutely brand new in the box (unopened box) 55 inch TCL 4K UHD Smart Roku TV.\n.Condition: Brand New In the (unopened). Same condition as you get from a store. Price: $330 Cash and Pick up only.",
                            OwnerId = 2,
                            Price = 330.0,
                            Title = "Brand New 55\" inch TCL - 4K UHD Smart Roku TV"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.HasOne("API.Entities.ItemListing", "ItemListing")
                        .WithMany("Images")
                        .HasForeignKey("ItemListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListingImages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemListing");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.HasOne("API.Entities.ItemCategory", "Category")
                        .WithMany("ItemListings")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("ItemListingImages");

                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
