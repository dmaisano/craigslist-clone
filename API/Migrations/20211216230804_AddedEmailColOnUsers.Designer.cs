// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211216230804_AddedEmailColOnUsers")]
    partial class AddedEmailColOnUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Member");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 16, 18, 8, 3, 879, DateTimeKind.Local).AddTicks(3575),
                            Email = "admin@domain.net",
                            PasswordHash = new byte[] { 115, 19, 131, 155, 13, 221, 232, 38, 212, 195, 231, 45, 159, 181, 149, 222, 91, 195, 208, 98, 156, 26, 148, 102, 80, 198, 71, 175, 198, 167, 59, 15, 234, 220, 140, 178, 222, 194, 232, 199, 193, 148, 248, 60, 172, 198, 158, 164, 75, 227, 231, 121, 30, 165, 57, 141, 232, 138, 115, 172, 247, 252, 66, 76 },
                            PasswordSalt = new byte[] { 118, 151, 94, 52, 180, 33, 149, 26, 100, 123, 2, 86, 143, 164, 127, 251, 54, 235, 19, 106, 151, 86, 116, 35, 85, 232, 53, 21, 206, 220, 6, 117, 174, 236, 105, 167, 31, 251, 40, 178, 216, 19, 161, 42, 113, 215, 217, 112, 33, 126, 192, 174, 175, 102, 44, 240, 52, 0, 244, 114, 192, 177, 147, 28, 70, 96, 113, 179, 171, 144, 233, 108, 244, 57, 76, 94, 166, 59, 79, 14, 111, 88, 205, 125, 76, 62, 20, 204, 195, 212, 250, 92, 209, 216, 135, 187, 59, 155, 60, 254, 92, 224, 6, 170, 148, 194, 152, 164, 119, 29, 89, 252, 174, 27, 216, 109, 233, 196, 139, 210, 51, 224, 222, 144, 98, 250, 88, 78 },
                            Role = "Admin",
                            UpdatedOn = new DateTime(2021, 12, 16, 18, 8, 3, 879, DateTimeKind.Local).AddTicks(3577),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 16, 18, 8, 3, 879, DateTimeKind.Local).AddTicks(3610),
                            Email = "member@domain.net",
                            PasswordHash = new byte[] { 76, 239, 71, 202, 199, 5, 201, 168, 244, 106, 204, 47, 169, 116, 193, 207, 172, 92, 152, 44, 145, 210, 101, 65, 244, 71, 57, 20, 97, 112, 22, 135, 229, 103, 205, 160, 38, 16, 175, 68, 175, 188, 208, 6, 251, 67, 80, 98, 165, 120, 224, 208, 141, 100, 104, 184, 146, 123, 252, 74, 146, 8, 71, 24 },
                            PasswordSalt = new byte[] { 71, 224, 40, 52, 148, 178, 245, 111, 38, 185, 236, 75, 104, 55, 82, 102, 82, 110, 27, 177, 42, 92, 73, 101, 228, 129, 29, 252, 45, 160, 119, 71, 102, 106, 9, 103, 33, 106, 68, 253, 25, 235, 158, 127, 95, 64, 109, 235, 4, 255, 57, 44, 222, 54, 255, 54, 138, 31, 51, 11, 163, 251, 251, 78, 214, 84, 71, 45, 159, 159, 125, 224, 132, 89, 111, 151, 143, 207, 59, 198, 32, 53, 226, 49, 91, 237, 19, 217, 31, 78, 167, 142, 184, 205, 110, 87, 169, 217, 163, 12, 224, 242, 146, 18, 29, 140, 251, 104, 153, 129, 38, 187, 124, 101, 220, 178, 45, 182, 120, 42, 11, 29, 189, 105, 237, 193, 73, 226 },
                            Role = "Member",
                            UpdatedOn = new DateTime(2021, 12, 16, 18, 8, 3, 879, DateTimeKind.Local).AddTicks(3611),
                            UserName = "member"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Name = "Electronics"
                        },
                        new
                        {
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemListingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemListingId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            ItemListingId = 1,
                            OwnerId = 2,
                            PublicId = "tcl_tv_ufvgvz",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551491/folding_table_rgrmom.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsMain = true,
                            ItemListingId = 2,
                            OwnerId = 2,
                            PublicId = "folding_table_rgrmom",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551492/tcl_tv_ufvgvz.jpg"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("Condition")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("Number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemListings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CategoryName = "Furniture",
                            Condition = 2,
                            CreatedOn = new DateTime(2021, 12, 16, 18, 8, 3, 879, DateTimeKind.Local).AddTicks(4920),
                            Description = "Round folding dining table from Bob's Furniture Store.\nGreat for smaller dining areas/apartments. Smoke-free home.\n\nAsking price - $50.",
                            OwnerId = 2,
                            Price = 50.0,
                            Title = "Round Folding Dining Table"
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CategoryName = "Electronics",
                            Condition = 0,
                            CreatedOn = new DateTime(2021, 12, 16, 18, 8, 3, 879, DateTimeKind.Local).AddTicks(4933),
                            Description = "Absolutely brand new in the box (unopened box) 55 inch TCL 4K UHD Smart Roku TV.\n.Condition: Brand New In the (unopened). Same condition as you get from a store. Price: $330 Cash and Pick up only.",
                            OwnerId = 2,
                            Price = 330.0,
                            Title = "Brand New 55\" inch TCL - 4K UHD Smart Roku TV"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.HasOne("API.Entities.ItemListing", "ItemListing")
                        .WithMany("Images")
                        .HasForeignKey("ItemListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListingImages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemListing");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.HasOne("API.Entities.ItemCategory", "Category")
                        .WithMany("ItemListings")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("ItemListingImages");

                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
