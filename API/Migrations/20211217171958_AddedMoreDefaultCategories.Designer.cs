// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211217171958_AddedMoreDefaultCategories")]
    partial class AddedMoreDefaultCategories
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Member");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 17, 12, 19, 58, 95, DateTimeKind.Local).AddTicks(3657),
                            Email = "admin@domain.net",
                            PasswordHash = new byte[] { 58, 209, 167, 71, 186, 101, 146, 55, 198, 238, 197, 70, 131, 250, 81, 169, 98, 105, 221, 203, 182, 37, 226, 241, 93, 251, 234, 53, 208, 13, 248, 140, 39, 210, 173, 167, 251, 23, 16, 235, 18, 248, 11, 62, 207, 140, 245, 30, 217, 45, 158, 116, 107, 30, 242, 243, 46, 191, 254, 144, 112, 48, 193, 40 },
                            PasswordSalt = new byte[] { 169, 157, 151, 254, 187, 185, 253, 181, 142, 117, 23, 170, 242, 61, 2, 235, 93, 119, 66, 128, 211, 129, 235, 3, 130, 21, 64, 124, 235, 65, 8, 6, 93, 5, 234, 181, 159, 244, 3, 210, 97, 120, 94, 253, 98, 178, 9, 201, 255, 140, 132, 159, 22, 65, 103, 9, 92, 118, 67, 242, 253, 160, 68, 81, 138, 91, 252, 115, 204, 96, 102, 167, 209, 134, 206, 168, 162, 202, 223, 238, 245, 46, 116, 58, 31, 224, 57, 78, 35, 184, 83, 122, 166, 174, 245, 104, 138, 197, 252, 0, 7, 0, 22, 245, 50, 68, 172, 145, 215, 25, 160, 85, 184, 215, 83, 185, 60, 177, 111, 19, 173, 208, 247, 22, 20, 241, 178, 55 },
                            Role = "Admin",
                            UpdatedOn = new DateTime(2021, 12, 17, 12, 19, 58, 95, DateTimeKind.Local).AddTicks(3660),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 17, 12, 19, 58, 95, DateTimeKind.Local).AddTicks(3719),
                            Email = "member@domain.net",
                            PasswordHash = new byte[] { 7, 81, 174, 206, 23, 170, 183, 33, 154, 232, 29, 38, 240, 114, 153, 103, 147, 14, 205, 129, 182, 71, 110, 232, 98, 7, 255, 18, 215, 207, 5, 36, 45, 6, 7, 148, 249, 168, 79, 90, 172, 120, 14, 146, 25, 63, 6, 99, 136, 255, 249, 190, 214, 234, 1, 160, 52, 214, 154, 49, 109, 36, 110, 100 },
                            PasswordSalt = new byte[] { 226, 144, 144, 51, 219, 50, 63, 255, 55, 131, 86, 232, 207, 178, 179, 15, 27, 140, 191, 18, 254, 238, 154, 97, 112, 191, 230, 49, 98, 15, 100, 111, 214, 218, 213, 14, 132, 4, 3, 183, 137, 163, 85, 6, 246, 233, 214, 33, 230, 139, 10, 205, 214, 4, 238, 174, 31, 133, 174, 144, 218, 126, 20, 77, 6, 126, 174, 230, 142, 97, 80, 18, 133, 181, 71, 230, 46, 213, 131, 239, 152, 72, 195, 52, 29, 191, 49, 102, 26, 61, 12, 31, 40, 205, 148, 66, 43, 30, 30, 105, 83, 182, 129, 119, 252, 131, 39, 176, 227, 176, 244, 200, 158, 231, 112, 65, 103, 240, 209, 216, 149, 198, 201, 10, 96, 250, 174, 12 },
                            Role = "Member",
                            UpdatedOn = new DateTime(2021, 12, 17, 12, 19, 58, 95, DateTimeKind.Local).AddTicks(3720),
                            UserName = "member"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Name = "Electronics"
                        },
                        new
                        {
                            Name = "Furniture"
                        },
                        new
                        {
                            Name = "Sporting"
                        },
                        new
                        {
                            Name = "Misc."
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemListingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemListingId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            ItemListingId = 1,
                            OwnerId = 2,
                            PublicId = "tcl_tv_ufvgvz",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551491/folding_table_rgrmom.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsMain = true,
                            ItemListingId = 2,
                            OwnerId = 2,
                            PublicId = "folding_table_rgrmom",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551492/tcl_tv_ufvgvz.jpg"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("Condition")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("Number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemListings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CategoryName = "Furniture",
                            Condition = 2,
                            CreatedOn = new DateTime(2021, 12, 17, 12, 19, 58, 95, DateTimeKind.Local).AddTicks(5052),
                            Description = "Round folding dining table from Bob's Furniture Store.\nGreat for smaller dining areas/apartments. Smoke-free home.\n\nAsking price - $50.",
                            OwnerId = 2,
                            Price = 50.0,
                            Title = "Round Folding Dining Table"
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CategoryName = "Electronics",
                            Condition = 0,
                            CreatedOn = new DateTime(2021, 12, 17, 12, 19, 58, 95, DateTimeKind.Local).AddTicks(5064),
                            Description = "Absolutely brand new in the box (unopened box) 55 inch TCL 4K UHD Smart Roku TV.\n.Condition: Brand New In the (unopened). Same condition as you get from a store. Price: $330 Cash and Pick up only.",
                            OwnerId = 2,
                            Price = 330.0,
                            Title = "Brand New 55\" inch TCL - 4K UHD Smart Roku TV"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.HasOne("API.Entities.ItemListing", "ItemListing")
                        .WithMany("Images")
                        .HasForeignKey("ItemListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListingImages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemListing");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.HasOne("API.Entities.ItemCategory", "Category")
                        .WithMany("ItemListings")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("ItemListingImages");

                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
