// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Member");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 15, 11, 32, 25, 521, DateTimeKind.Local).AddTicks(5706),
                            PasswordHash = new byte[] { 50, 24, 41, 28, 187, 34, 179, 77, 172, 7, 255, 22, 110, 186, 98, 226, 227, 248, 77, 64, 96, 207, 236, 15, 32, 95, 203, 133, 42, 249, 250, 100, 196, 46, 39, 126, 111, 241, 174, 64, 13, 166, 121, 102, 13, 69, 137, 112, 83, 195, 66, 54, 253, 131, 58, 53, 244, 119, 245, 3, 102, 160, 142, 71 },
                            PasswordSalt = new byte[] { 90, 65, 168, 129, 201, 176, 170, 97, 132, 118, 96, 237, 33, 40, 186, 194, 145, 199, 32, 52, 30, 7, 128, 160, 113, 52, 125, 68, 39, 134, 174, 29, 15, 122, 48, 186, 70, 57, 27, 250, 136, 255, 180, 0, 19, 85, 60, 119, 255, 8, 244, 195, 170, 29, 212, 14, 207, 130, 242, 98, 201, 62, 126, 100, 58, 74, 14, 134, 6, 127, 80, 44, 13, 161, 215, 222, 114, 195, 39, 79, 241, 90, 58, 185, 183, 49, 118, 206, 67, 20, 174, 163, 233, 211, 171, 39, 170, 225, 79, 179, 143, 212, 55, 217, 118, 190, 146, 218, 107, 98, 136, 244, 170, 209, 201, 229, 97, 212, 55, 82, 171, 107, 158, 185, 231, 121, 72, 38 },
                            Role = "Admin",
                            UpdatedOn = new DateTime(2021, 12, 15, 11, 32, 25, 521, DateTimeKind.Local).AddTicks(5708),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 15, 11, 32, 25, 521, DateTimeKind.Local).AddTicks(5741),
                            PasswordHash = new byte[] { 48, 80, 88, 78, 93, 168, 127, 200, 140, 206, 127, 130, 46, 12, 228, 199, 220, 4, 86, 22, 7, 214, 36, 209, 176, 33, 29, 158, 123, 239, 14, 244, 191, 85, 120, 79, 255, 18, 134, 45, 76, 146, 36, 71, 191, 114, 126, 74, 123, 137, 135, 85, 140, 156, 27, 137, 4, 9, 22, 194, 5, 75, 234, 115 },
                            PasswordSalt = new byte[] { 199, 63, 132, 162, 139, 236, 242, 236, 166, 145, 70, 156, 57, 127, 87, 4, 142, 247, 63, 6, 129, 33, 175, 144, 9, 5, 140, 65, 174, 143, 16, 170, 163, 153, 139, 213, 189, 196, 235, 175, 151, 210, 147, 81, 183, 189, 189, 36, 187, 163, 218, 55, 25, 218, 127, 1, 69, 188, 16, 38, 231, 200, 169, 222, 92, 159, 176, 254, 74, 20, 188, 43, 55, 105, 5, 186, 144, 218, 209, 41, 201, 239, 110, 223, 236, 80, 202, 119, 232, 54, 72, 28, 206, 22, 225, 173, 84, 92, 45, 196, 169, 5, 80, 185, 3, 133, 235, 243, 159, 177, 180, 233, 141, 201, 120, 125, 214, 188, 5, 250, 28, 217, 147, 160, 95, 103, 140, 255 },
                            Role = "Member",
                            UpdatedOn = new DateTime(2021, 12, 15, 11, 32, 25, 521, DateTimeKind.Local).AddTicks(5743),
                            UserName = "member"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Name = "Electronics"
                        },
                        new
                        {
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemListingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemListingId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            ItemListingId = 1,
                            OwnerId = 2,
                            PublicId = "tcl_tv_ufvgvz",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551491/folding_table_rgrmom.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsMain = true,
                            ItemListingId = 2,
                            OwnerId = 2,
                            PublicId = "folding_table_rgrmom",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551492/tcl_tv_ufvgvz.jpg"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Condition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(4);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("Number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemListings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CategoryName = "Furniture",
                            Condition = 2,
                            CreatedOn = new DateTime(2021, 12, 15, 11, 32, 25, 521, DateTimeKind.Local).AddTicks(7127),
                            Description = "Round folding dining table from Bob's Furniture Store.\nGreat for smaller dining areas/apartments. Smoke-free home.\n\nAsking price - $50.",
                            OwnerId = 2,
                            Price = 50.0,
                            Title = "Round Folding Dining Table"
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CategoryName = "Electronics",
                            Condition = 0,
                            CreatedOn = new DateTime(2021, 12, 15, 11, 32, 25, 521, DateTimeKind.Local).AddTicks(7139),
                            Description = "Absolutely brand new in the box (unopened box) 55 inch TCL 4K UHD Smart Roku TV.\n.Condition: Brand New In the (unopened). Same condition as you get from a store. Price: $330 Cash and Pick up only.",
                            OwnerId = 2,
                            Price = 330.0,
                            Title = "Brand New 55\" inch TCL - 4K UHD Smart Roku TV"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.HasOne("API.Entities.ItemListing", "ItemListing")
                        .WithMany("Images")
                        .HasForeignKey("ItemListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListingImages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemListing");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.HasOne("API.Entities.ItemCategory", "Category")
                        .WithMany("ItemListings")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("ItemListingImages");

                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
