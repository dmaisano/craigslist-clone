// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Member");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 15, 19, 13, 51, 30, DateTimeKind.Local).AddTicks(2579),
                            PasswordHash = new byte[] { 245, 133, 212, 199, 187, 108, 38, 143, 189, 32, 180, 52, 219, 80, 7, 73, 175, 71, 205, 182, 61, 225, 43, 169, 5, 159, 78, 239, 127, 100, 206, 223, 241, 72, 53, 241, 83, 32, 115, 53, 23, 201, 49, 185, 252, 119, 4, 31, 189, 142, 142, 114, 130, 82, 233, 207, 0, 202, 170, 230, 5, 210, 114, 47 },
                            PasswordSalt = new byte[] { 66, 227, 166, 49, 50, 118, 58, 229, 56, 43, 242, 11, 226, 68, 160, 104, 231, 128, 130, 11, 83, 148, 136, 219, 136, 131, 203, 110, 4, 184, 30, 61, 185, 170, 40, 246, 32, 98, 36, 234, 74, 213, 166, 124, 45, 165, 42, 234, 28, 191, 125, 10, 97, 21, 126, 201, 41, 206, 102, 215, 126, 30, 42, 165, 28, 5, 214, 188, 188, 154, 144, 85, 45, 248, 175, 87, 66, 27, 59, 80, 110, 200, 2, 200, 192, 36, 227, 31, 238, 228, 243, 43, 115, 99, 179, 246, 232, 38, 124, 162, 132, 200, 128, 41, 216, 106, 184, 105, 86, 4, 153, 210, 134, 171, 179, 249, 232, 234, 200, 130, 89, 215, 189, 4, 41, 129, 22, 229 },
                            Role = "Admin",
                            UpdatedOn = new DateTime(2021, 12, 15, 19, 13, 51, 30, DateTimeKind.Local).AddTicks(2581),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 15, 19, 13, 51, 30, DateTimeKind.Local).AddTicks(2615),
                            PasswordHash = new byte[] { 37, 144, 251, 171, 150, 188, 155, 154, 222, 40, 250, 122, 189, 182, 155, 28, 115, 52, 19, 144, 248, 80, 152, 9, 203, 100, 53, 102, 132, 87, 125, 199, 211, 39, 207, 169, 193, 25, 17, 30, 80, 156, 16, 30, 15, 41, 99, 188, 20, 85, 34, 76, 119, 31, 87, 166, 154, 7, 94, 189, 43, 225, 228, 189 },
                            PasswordSalt = new byte[] { 37, 15, 139, 28, 196, 83, 191, 217, 88, 13, 71, 14, 154, 29, 26, 31, 181, 236, 55, 159, 248, 202, 173, 197, 158, 34, 164, 40, 254, 241, 222, 187, 246, 64, 46, 103, 160, 99, 219, 99, 117, 236, 130, 194, 247, 43, 13, 198, 192, 248, 158, 114, 86, 211, 46, 75, 185, 249, 244, 9, 19, 128, 21, 214, 147, 222, 10, 22, 142, 200, 178, 111, 31, 238, 165, 228, 32, 12, 54, 166, 172, 124, 237, 75, 97, 17, 161, 116, 149, 28, 89, 16, 86, 160, 15, 128, 41, 226, 81, 220, 183, 130, 107, 67, 68, 91, 103, 168, 151, 180, 4, 100, 33, 69, 229, 209, 96, 129, 195, 109, 164, 196, 26, 174, 14, 32, 108, 193 },
                            Role = "Member",
                            UpdatedOn = new DateTime(2021, 12, 15, 19, 13, 51, 30, DateTimeKind.Local).AddTicks(2617),
                            UserName = "member"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Name = "Electronics"
                        },
                        new
                        {
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemListingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemListingId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            ItemListingId = 1,
                            OwnerId = 2,
                            PublicId = "tcl_tv_ufvgvz",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551491/folding_table_rgrmom.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsMain = true,
                            ItemListingId = 2,
                            OwnerId = 2,
                            PublicId = "folding_table_rgrmom",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551492/tcl_tv_ufvgvz.jpg"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Condition")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("Number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemListings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CategoryName = "Furniture",
                            Condition = 2,
                            CreatedOn = new DateTime(2021, 12, 15, 19, 13, 51, 30, DateTimeKind.Local).AddTicks(3793),
                            Description = "Round folding dining table from Bob's Furniture Store.\nGreat for smaller dining areas/apartments. Smoke-free home.\n\nAsking price - $50.",
                            OwnerId = 2,
                            Price = 50.0,
                            Title = "Round Folding Dining Table"
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CategoryName = "Electronics",
                            Condition = 0,
                            CreatedOn = new DateTime(2021, 12, 15, 19, 13, 51, 30, DateTimeKind.Local).AddTicks(3806),
                            Description = "Absolutely brand new in the box (unopened box) 55 inch TCL 4K UHD Smart Roku TV.\n.Condition: Brand New In the (unopened). Same condition as you get from a store. Price: $330 Cash and Pick up only.",
                            OwnerId = 2,
                            Price = 330.0,
                            Title = "Brand New 55\" inch TCL - 4K UHD Smart Roku TV"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.HasOne("API.Entities.ItemListing", "ItemListing")
                        .WithMany("Images")
                        .HasForeignKey("ItemListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListingImages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemListing");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.HasOne("API.Entities.ItemCategory", "Category")
                        .WithMany("ItemListings")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("ItemListingImages");

                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
