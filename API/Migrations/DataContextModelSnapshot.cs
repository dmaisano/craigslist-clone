// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Member");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 16, 17, 0, 0, 406, DateTimeKind.Local).AddTicks(5525),
                            PasswordHash = new byte[] { 196, 32, 71, 122, 246, 143, 232, 113, 64, 37, 240, 183, 70, 133, 29, 238, 46, 97, 71, 235, 77, 137, 48, 86, 179, 170, 82, 114, 146, 61, 130, 227, 172, 90, 76, 28, 57, 190, 190, 62, 92, 251, 177, 39, 234, 191, 7, 96, 150, 38, 194, 3, 110, 143, 148, 90, 56, 174, 104, 68, 141, 228, 223, 153 },
                            PasswordSalt = new byte[] { 231, 227, 4, 21, 219, 198, 202, 38, 67, 26, 92, 236, 88, 252, 160, 144, 53, 39, 216, 80, 44, 197, 232, 170, 119, 30, 69, 189, 30, 25, 151, 147, 72, 189, 241, 72, 178, 228, 95, 65, 194, 171, 234, 239, 133, 148, 24, 59, 126, 199, 151, 237, 73, 241, 226, 32, 200, 101, 47, 88, 106, 64, 13, 217, 221, 153, 81, 245, 165, 129, 165, 55, 180, 194, 244, 189, 159, 162, 236, 206, 93, 116, 50, 210, 202, 186, 38, 242, 20, 147, 155, 236, 214, 139, 189, 131, 23, 146, 79, 177, 101, 212, 77, 186, 242, 155, 11, 107, 148, 90, 28, 138, 2, 168, 69, 85, 212, 195, 233, 184, 14, 191, 124, 202, 151, 84, 244, 233 },
                            Role = "Admin",
                            UpdatedOn = new DateTime(2021, 12, 16, 17, 0, 0, 406, DateTimeKind.Local).AddTicks(5527),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 16, 17, 0, 0, 406, DateTimeKind.Local).AddTicks(5559),
                            PasswordHash = new byte[] { 176, 163, 75, 188, 234, 178, 128, 235, 117, 123, 24, 10, 123, 13, 11, 37, 213, 116, 235, 5, 191, 5, 90, 133, 228, 15, 120, 210, 85, 144, 161, 200, 40, 91, 22, 1, 219, 184, 170, 45, 8, 145, 207, 230, 88, 21, 106, 121, 143, 255, 221, 112, 104, 96, 209, 111, 42, 246, 166, 63, 37, 38, 63, 117 },
                            PasswordSalt = new byte[] { 48, 240, 81, 69, 17, 40, 40, 117, 47, 198, 130, 192, 227, 200, 73, 99, 255, 138, 114, 10, 59, 25, 40, 181, 161, 114, 133, 118, 213, 3, 56, 120, 74, 125, 228, 33, 36, 87, 135, 61, 217, 142, 225, 46, 39, 151, 173, 47, 236, 139, 157, 212, 138, 65, 234, 76, 103, 17, 21, 6, 155, 130, 223, 120, 136, 134, 170, 232, 212, 200, 217, 222, 190, 131, 151, 135, 34, 52, 163, 48, 140, 132, 131, 119, 99, 232, 181, 233, 252, 153, 38, 43, 14, 53, 119, 94, 172, 5, 118, 7, 150, 66, 109, 112, 6, 69, 93, 79, 147, 240, 160, 189, 36, 110, 54, 236, 143, 145, 84, 170, 159, 172, 255, 145, 190, 29, 122, 57 },
                            Role = "Member",
                            UpdatedOn = new DateTime(2021, 12, 16, 17, 0, 0, 406, DateTimeKind.Local).AddTicks(5561),
                            UserName = "member"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Name = "Electronics"
                        },
                        new
                        {
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemListingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemListingId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            ItemListingId = 1,
                            OwnerId = 2,
                            PublicId = "tcl_tv_ufvgvz",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551491/folding_table_rgrmom.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsMain = true,
                            ItemListingId = 2,
                            OwnerId = 2,
                            PublicId = "folding_table_rgrmom",
                            Url = "https://res.cloudinary.com/dub1phgqv/image/upload/v1639551492/tcl_tv_ufvgvz.jpg"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("Condition")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("Number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemListings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CategoryName = "Furniture",
                            Condition = 2,
                            CreatedOn = new DateTime(2021, 12, 16, 17, 0, 0, 406, DateTimeKind.Local).AddTicks(6848),
                            Description = "Round folding dining table from Bob's Furniture Store.\nGreat for smaller dining areas/apartments. Smoke-free home.\n\nAsking price - $50.",
                            OwnerId = 2,
                            Price = 50.0,
                            Title = "Round Folding Dining Table"
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CategoryName = "Electronics",
                            Condition = 0,
                            CreatedOn = new DateTime(2021, 12, 16, 17, 0, 0, 406, DateTimeKind.Local).AddTicks(6860),
                            Description = "Absolutely brand new in the box (unopened box) 55 inch TCL 4K UHD Smart Roku TV.\n.Condition: Brand New In the (unopened). Same condition as you get from a store. Price: $330 Cash and Pick up only.",
                            OwnerId = 2,
                            Price = 330.0,
                            Title = "Brand New 55\" inch TCL - 4K UHD Smart Roku TV"
                        });
                });

            modelBuilder.Entity("API.Entities.ItemImage", b =>
                {
                    b.HasOne("API.Entities.ItemListing", "ItemListing")
                        .WithMany("Images")
                        .HasForeignKey("ItemListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListingImages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemListing");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.HasOne("API.Entities.ItemCategory", "Category")
                        .WithMany("ItemListings")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("ItemListings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("ItemListingImages");

                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemCategory", b =>
                {
                    b.Navigation("ItemListings");
                });

            modelBuilder.Entity("API.Entities.ItemListing", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
