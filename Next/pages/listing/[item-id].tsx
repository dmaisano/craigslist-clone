import { DeleteIcon } from "@chakra-ui/icons";
import {
  Box,
  Button,
  Container,
  Heading,
  Image,
  Link as ChakraLink,
  Text,
} from "@chakra-ui/react";
import axios from "axios";
import Carousel from "framer-motion-carousel";
import {
  GetServerSideProps,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { ParsedUrlQuery } from "querystring";
import { useContext } from "react";
import { Layout } from "../../components";
import { AutoResizeTextarea } from "../../components/AutoResizeTextArea";
import { API_URL } from "../../constants";
import { IItemListing, ItemCondition } from "../../model/items.model";
import { formatDateString, splitPascalCase } from "../../utils";
import { archiveItem } from "../../utils/archiveItem";
import { AppUserContext } from "../_app";

export const getServerSideProps: GetServerSideProps<{
  item: IItemListing | null;
}> = async (ctx) => {
  let item: IItemListing | null = null;
  const itemQueryId = (ctx.params as ParsedUrlQuery)["item-id"] as string;

  try {
    const res = await axios.get<any>(`${API_URL}/item-listing/${itemQueryId}`);

    if (res.status === 200) {
      item = res.data || null;
    }
  } catch (error) {
    console.error(error);
  }

  return {
    props: {
      item,
    },
  };
};

const ViewItemPage: NextPage<
  InferGetServerSidePropsType<typeof getServerSideProps>
> = ({ item }) => {
  const [{ email: userEmail, token }] = useContext(AppUserContext);
  const router = useRouter();

  const handleArchive = async () => {
    const res = await archiveItem({ itemId: item?.id, token });

    if (res) {
      router.back();
    }
  };

  return (
    <>
      <Head>
        <title>
          Craigslist Clone | {item === null ? `Item Not Found` : item.title}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <Container mt="16" maxW="container.sm" textAlign="center">
          {item === null ? (
            <Heading as="h2" fontSize="2xl" mb="8" textTransform="uppercase">
              Item Not Found âš 
            </Heading>
          ) : (
            <>
              <Heading as="h2" fontSize="2xl" mb="4">
                {item.title} - ${item.price} (
                {splitPascalCase(ItemCondition[item.condition])})
              </Heading>

              <Text fontSize="1.25rem" fontWeight="semibold">
                Email:{" "}
                <ChakraLink
                  href={`mailto:${item.ownerEmail}?subject=CL%20|%20${item.title}&body=Hi!%20I'd%20like%20to%20purchase%20this%20from%20you.`}
                  color="blue.500"
                >
                  {item.ownerEmail}
                </ChakraLink>
              </Text>

              <Text fontSize="1.25rem" fontWeight="semibold" mt="2">
                Posted on {formatDateString(item.datePosted)}
              </Text>

              <Box width={[300, 400, 500]} mx="auto" mt="4">
                <Box>
                  <Carousel interval={0} loop={false} autoPlay={false}>
                    {item.images.map((image, i) => (
                      <Image
                        draggable={false}
                        src={image.url}
                        key={i}
                        width="full"
                        mx="auto"
                        alt=""
                      />
                    ))}
                  </Carousel>
                </Box>

                <Box mt="6">
                  <AutoResizeTextarea
                    isDisabled
                    resize="none"
                    value={item.description || `No description entered.`}
                    minH="250px"
                    maxH="600px"
                    color="gray.800"
                    _disabled={{
                      color: "gray.800",
                    }}
                  />
                </Box>
              </Box>
              <Box pb="8"></Box>
              {userEmail === item.ownerEmail && (
                <Button
                  colorScheme="red"
                  textAlign="start"
                  onClick={() => handleArchive()}
                >
                  Archive <DeleteIcon ml="2" />
                </Button>
              )}
              <Box pb="8"></Box>
            </>
          )}
        </Container>
      </Layout>
    </>
  );
};

export default ViewItemPage;
